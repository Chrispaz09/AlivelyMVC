@model AlivelyMVC.ViewModels.DashboardViewModel
@{
    ViewData["Title"] = "Dashboard";
}
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.12.1/css/all.min.css" integrity="sha256-mmgLkCYLUQbXn0B1SRqzHar6dCnv9oZFPEC1g1cwlkk=" crossorigin="anonymous" />

<br />
@if (@Model is not null)
{
    <div class="col-md-10 ">
        <div class="row ">
            <div class="col-xl-3 col-lg-6">
                <div class="card">
                    <div class="card-statistic-3 p-4">
                        <div class="mb-4">
                            <h4 class="card-title mb-0">All SMART Goals</h4>
                        </div>
                        Total: @Model.SMARTGoals.Count()
                        <br />
                        Overdue:@Model.GoalsOverdue.Count()
                    </div>
                </div>
            </div>
            <div class="col-xl-3 col-lg-6">
                <div class="card">
                    <div class="card-statistic-3 p-4">
                        <div class="card-icon card-icon-large"></div>
                        <div class="mb-4">
                            <h4 class="card-title mb-0">All Tasks</h4>
                        </div>
                        Total: @Model.Tasks.Count()
                        <br />
                        Complete: @Model.CompletedTasks.Count() / @Model.Tasks.Count()
                        <br />
                        Incomplete: @Model.IncompleteTasks.Count() / @Model.Tasks.Count()

                    </div>
                </div>
            </div>
            <div class="col-xl-3 col-lg-6">
                <div class="card">
                    @if (@Model.NextNearestGoal is not null && @Model.NextNearestGoal.Tasks is not null)
                    {
                        <div class="card-statistic-3 p-4">
                            <div class="mb-4">
                                <h4 class="card-title mb-0">Next Nearest Goal</h4>
                                <h5>Deadline: @Model.NextNearestGoal.AchieveDate.ToShortDateString()</h5>
                            </div>

                            Goal: @Model.NextNearestGoal.Target
                            <br />
                            Number of Tasks: @Model.NextNearestGoal.Tasks.Count()
                            <br />
                            Tasks completed: @Model.NextNearestGoal.Tasks.Where(tasks => tasks.Completed == true).Count() / @Model.NextNearestGoal.Tasks.Count
                            <br>
                            Tasks incomplete: @Model.NextNearestGoal.Tasks.Where(tasks => tasks.Completed == false).Count() / @Model.NextNearestGoal.Tasks.Count
                        </div>
                    }
                </div>
            </div>

        </div>
    </div>
}else
{
    <h4>No Goals!</h4>
}
<style>
    .card {
        background-color: #fff;
        border-radius: 10px;
        border: none;
        position: relative;
        margin-bottom: 30px;
        box-shadow: 0 0.46875rem 2.1875rem rgba(90,97,105,0.1), 0 0.9375rem 1.40625rem rgba(90,97,105,0.1), 0 0.25rem 0.53125rem rgba(90,97,105,0.12), 0 0.125rem 0.1875rem rgba(90,97,105,0.1);
    }

    .l-bg-cherry {
        background: linear-gradient(to right, #493240, #f09) !important;
        color: #fff;
    }

    .l-bg-blue-dark {
        background: linear-gradient(to right, #373b44, #4286f4) !important;
        color: #fff;
    }

    .l-bg-green-dark {
        background: linear-gradient(to right, #0a504a, #38ef7d) !important;
        color: #fff;
    }

    .l-bg-orange-dark {
        background: linear-gradient(to right, #a86008, #ffba56) !important;
        color: #fff;
    }

    .card .card-statistic-3 .card-icon-large .fas, .card .card-statistic-3 .card-icon-large .far, .card .card-statistic-3 .card-icon-large .fab, .card .card-statistic-3 .card-icon-large .fal {
        font-size: 110px;
    }

    .card .card-statistic-3 .card-icon {
        text-align: center;
        line-height: 50px;
        margin-left: 15px;
        color: #000;
        position: absolute;
        right: -5px;
        top: 20px;
        opacity: 0.1;
    }

    .l-bg-cyan {
        background: linear-gradient(135deg, #289cf5, #84c0ec) !important;
        color: #fff;
    }

    .l-bg-green {
        background: linear-gradient(135deg, #23bdb8 0%, #43e794 100%) !important;
        color: #fff;
    }

    .l-bg-orange {
        background: linear-gradient(to right, #f9900e, #ffba56) !important;
        color: #fff;
    }

    .l-bg-cyan {
        background: linear-gradient(135deg, #289cf5, #84c0ec) !important;
        color: #fff;
    }
</style>
